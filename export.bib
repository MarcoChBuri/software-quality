@article{Basharat2024,
   abstract = {Identifying vulnerabilities within source code remains paramount in assuring software quality and security. This study introduces a refined semi-supervised learning methodology that capitalizes on pattern-exploiting training coupled with cloze-style interrogation techniques. The research strategy employed involves the training of a linguistic model on the SARD and Devign datasets, which are replete with vulnerable code fragments. The training procedure entails obscuring specific segments of the code and subsequently prompting the model to ascertain the obfuscated tokens. Empirical analyses underscore the efficacy of our method in pinpointing vulnerabilities in source code, benefiting substantially from patterns discerned within the code fragments. This investigation underscores the potential of integrating pattern-exploiting training and cloze-based queries to enhance the precision of vulnerability detection within source code.},
   author = {Mahmoud Basharat and Marwan Omar},
   doi = {10.2478/ijmce-2025-0005},
   issn = {29567068},
   journal = {International Journal of Mathematics and Computer in Engineering},
   month = {6},
   publisher = {Walter de Gruyter GmbH},
   title = {SecuGuard: Leveraging pattern-exploiting training in language models for advanced software vulnerability detection},
   year = {2024}
}
@article{Iftikhar2025,
   abstract = {Context: Code reviewers provide valuable feedback during the code review. Identifying common issues described in the reviewers’ feedback can provide input for devising context-specific software development improvements. However, the use of reviewer feedback for this purpose is currently less explored. Objective: In this study, we assess how automation can derive more interpretable and informative themes in reviewers’ feedback and whether these themes help to identify recurring quality-related issues in code changes. Method: We conducted a participatory case study using the JabRef system to analyze reviewers’ feedback on merged and abandoned code changes. We used two promising topic modeling methods (GSDMM and BERTopic) to identify themes in 5,560 code review comments. The resulting themes were analyzed and named by a domain expert from JabRef. Results: The domain expert considered the identified themes from the two topic models to represent quality-related issues. Different quality issues are pointed out in code reviews for merged and abandoned code changes. While BERTopic provides higher objective coherence, the domain expert considered themes from short-text topic modeling more informative and easy to interpret than BERTopic-based topic modeling. Conclusions: The identified prevalent code quality issues aim to address the maintainability-focused issues. The analysis of code review comments can enhance the current practices for JabRef by improving the guidelines for new developers and focusing discussions in the developer forums. The topic model choice impacts the interpretability of the generated themes, and a higher coherence (based on objective measures) of generated topics did not lead to improved interpretability by a domain expert.},
   author = {Umar Iftikhar and Jürgen Börstler and Nauman Bin Ali and Oliver Kopp},
   doi = {10.1007/s11219-025-09720-9},
   issn = {15731367},
   issue = {2},
   journal = {Software Quality Journal},
   keywords = {Modern code review,Natural language processing,Open-source systems,Software quality improvement},
   month = {6},
   publisher = {Springer},
   title = {Supporting the identification of prevalent quality issues in code changes by analyzing reviewers’ feedback},
   volume = {33},
   year = {2025}
}
@article{Jolak2025,
   abstract = {In recent years, interest in the potential influence of architectural smells on software maintainability has grown. Yet, empirical evidence directly linking maintainability quality attributes — such as modularity and testability — with architectural smells is scarce. This study analyzes seven architectural smells across 378 versions of eight open-source projects. We developed a tool to gather data on architectural smells, associated projects, and package-level quality attributes. The empirical findings reinforce that certain architectural smells indeed correlate with specific quality attributes - a notion previously backed merely by argument. Most architectural smells negatively correlated with project-level testability but not project-level modularity. While there is not a consistent negative correlation with testability at the package level, many smells display a pronounced negative association with the maintainability quality attributes.},
   author = {Rodi Jolak and Simon Karlsson and Felix Dobslaw},
   doi = {10.1016/j.jss.2025.112382},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   keywords = {Architectural smells,Software architecture,Software maintenance,Software metrics,Software quality},
   month = {7},
   publisher = {Elsevier Inc.},
   title = {An empirical investigation of the impact of architectural smells on software maintainability},
   volume = {225},
   year = {2025}
}
@article{Simon2025,
   abstract = {Tritium management is critical for the safety, sustainability, and economics of fusion energy systems, and advanced and reliable modeling tools help accelerate the development of tritium technologies. This paper presents the Tritium Migration Analysis Program, Version 8 (TMAP8), an open-source, MOOSE-based application developed to provide state-of-the-art tritium transport and fuel cycle modeling capabilities. TMAP8 aims to expand the capabilities of previous versions (i.e., TMAP4 and TMAP7) by leveraging modern computational techniques, ensuring high software quality assurance standards (key to building trust), and enabling multispecies, multiscale, and multiphysics simulations for integrated tritium transport modeling in complex geometries. This paper outlines TMAP8’s scope and rigorous development practices, emphasizing its transparency, accessibility, modularity, and reliability. We present the current suite of verification and validation cases based on those from TMAP4, demonstrating TMAP8’s accuracy and reliability against analytical solutions and experimental data. Additionally, the paper showcases TMAP8’s integrated fuel cycle modeling capabilities, highlighting its applicability at various scales and levels. The TMAP8 code and documentation are openly available, promoting collaborative development and widespread adoption within the fusion community. Future work will soon expand TMAP8’s verification and validation suite to include those from TMAP7 and other recent experimental studies for validation.},
   author = {Pierre Clément A. Simon and Casey T. Icenhour and Gyanender Singh and Alexander D. Lindsay and Chaitanya Bhave and Lin Yang and Adriaan Riet and Yifeng Che and Paul Humrickhouse and Pattrick Calderoni and Masashi Shimada},
   doi = {10.1016/j.fusengdes.2025.114874},
   issn = {09203796},
   journal = {Fusion Engineering and Design},
   keywords = {Computational fusion,MOOSE,Software quality assurance,TMAP,Tritium transport and fuel cycle,Verification and validation},
   month = {5},
   publisher = {Elsevier Ltd},
   title = {MOOSE-based Tritium Migration Analysis Program, Version 8 (TMAP8) for advanced open-source tritium transport and fuel cycle modeling},
   volume = {214},
   year = {2025}
}
@article{Minani2025,
   abstract = {The Internet of Things (IoT) is reshaping our lives, increasing the need for thorough pre-deployment testing. However, traditional software testing may not address the testing requirements of IoT systems, leading to quality challenges. A specific testing taxonomy is crucial, yet no widely recognized taxonomy exists for IoT system testing. We introduced an IoT-specific testing taxonomy that categorizes aspects of IoT systems testing into seven distinct categories. We mined testing aspects from 83 primary studies in IoT systems testing and built an initial taxonomy. This taxonomy was refined and validated through two rounds of surveys involving 16 and then 204 IoT industry practitioners. We assessed its effectiveness by conducting an empirical evaluation on two separate IoT systems, each involving 12 testers. Our findings categorize seven testing aspects: (1) testing objectives, (2) testing tools and artifacts, (3) testers, (4) testing stage, (5) testing environment, (6) Object Under Test (OUT) and metrics, and (7) testing approaches. The evaluation showed that testers equipped with the taxonomy could more effectively identify diverse test cases and scenarios. Additionally, we recommend new research opportunities to enhance the testing of IoT systems.},
   author = {Jean Baptiste Minani and Yahia El Fellah and Fatima Sabir and Naouel Moha and Yann Gaël Guéhéneuc and Martin Kuradusenge and Tomoaki Masuda},
   doi = {10.1016/j.jss.2025.112408},
   issn = {01641212},
   journal = {Journal of Systems and Software},
   keywords = {Application testing,IoT systems testing taxonomy,IoT testing taxonomy,Quality assurance taxonomy,Software engineering taxonomy,System testing,Testing approaches,Testing techniques},
   month = {8},
   publisher = {Elsevier Inc.},
   title = {IoT systems testing: Taxonomy, empirical findings, and recommendations},
   volume = {226},
   year = {2025}
}
